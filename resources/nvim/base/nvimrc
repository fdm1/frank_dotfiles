map <silent> <LocalLeader>ag :Ag<CR>
map <silent> <LocalLeader>cc :TComment<CR>
map <silent> <LocalLeader>uc :TComment<CR>
map <silent> <leader>ff :Files<CR>
map <silent> <leader>rn :set rnu!<CR>

" tmux-ify test runners
nmap <silent> <LocalLeader>rb :wa <bar> :TestFile -strategy=vimux<CR>
nmap <silent> <LocalLeader>rf :wa <bar> :TestNearest -strategy=vimux<CR>
nmap <silent> <LocalLeader>rl :wa <bar> :TestLast -strategy=vimux<CR>

" format python files with black if its installed in a local pipenv
if filereadable('Pipfile.lock')
  let black = system('grep \"black\" Pipfile.lock -q')
  if v:shell_error == 0
    let g:ale_fixers['python'] = ['black']
    let g:ale_python_black_auto_pipenv = 1
  endif
end

" Alias commands for fat-fingering
fun! SetupCommandAlias(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfun
call SetupCommandAlias("W","w")

let NERDTreeIgnore=['\.pyc$', '\.o$', '\.class$', '\.lo$', 'tmp', '\.tfplan$']

au BufRead,BufNewFile Podfile,*.podspec setfiletype ruby
au BufRead,BufNewFile .*vim* setfiletype vim

" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nmap <silent> <LocalLeader>zz :ZoomToggle<CR>


" You Complete Me
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]
let g:ycm_max_diagnostics_to_display=0
" DEBUG STUFFS
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'
let g:ycm_warning_symbol = '.'
let g:ycm_error_symbol = '..'
let g:ycm_server_use_vim_stdout = 1

" Autocompletion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)
autocmd BufEnter *.tsx set filetype=typescript
colorscheme dim

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" fixes glitch? in colors when using vim with tmux
set background=dark
set t_Co=256
set termguicolors

" Enable hybrid relative numbers by default
set rnu

" Alacritty stuff?
hi! Normal ctermbg=NONE guibg=NONE 
hi! NonText ctermbg=NONE guibg=NONE guifg=NONE ctermfg=NONE
